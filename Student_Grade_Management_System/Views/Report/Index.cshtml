@{
    ViewData["Title"] = "Report";
}

<h2>Generuoti ataskaitą</h2>

<div class="d-flex flex-wrap justify-content-center mt-4">
    <!-- Mokinio pasirinkimas -->
    <div class="me-3 mb-3" style="width: 20%; display: flex; flex-direction: column; justify-content: center;">
        <label for="filterStudent">Mokinys:</label>
        <select id="filterStudent" class="form-select" style="width: 100%;">
            <option value="">Pasirinkite mokinį</option>
            @if (ViewData["Students"] != null)
            {
                var students = (SelectList)ViewData["Students"];
                foreach (var student in students)
                {
                    <option value="@student.Value">@student.Text</option>
                }
            }
        </select>
    </div>

    <!-- Datos pasirinkimas -->
    <div class="me-3 mb-3" style="width: 20%; display: flex; flex-direction: column; justify-content: center;">
        <label for="filterStartDate">Pradžios data:</label>
        <input type="date" id="filterStartDate" class="form-control">
    </div>

    <!-- Datos pasirinkimas -->
    <div class="me-3 mb-3" style="width: 20%; display: flex; flex-direction: column; justify-content: center;">
        <label for="filterEndDate">Pabaigos data:</label>
        <input type="date" id="filterEndDate" class="form-control">
    </div>

    <!-- Mokytojo pasirinkimas -->
    <div class="me-3 mb-3" style="width: 20%; display: flex; flex-direction: column; justify-content: center;">
        <label for="filterSubject">Dalykas:</label>
        <select id="filterSubject" class="form-select" style="width: 100%;">
            <option value="">Pasirinkite dalyką</option>
            @if (ViewData["Subjects"] != null)
            {
                var subjects = (SelectList)ViewData["Subjects"];
                foreach (var subject in subjects)
                {
                    <option value="@subject.Text">@subject.Text</option>
                }
            }
        </select>
    </div>

    <!-- Įvertinimo intervalo pasirinkimas -->
    <div class="me-3 mb-3" style="width: 40%; display: flex; flex-direction: column; justify-content: center;">
        <label for="filterGradeMin">Įvertinimo intervalas:</label>
        <input type="range" id="filterGradeMin" class="form-range" min="1" max="10" step="1" value="1">
        <div class="mt-2">
            <output id="gradeMinValue">1</output>
        </div>

        <!-- Antras slankiklis (maksimalus įvertinimas) -->
        <input type="range" id="filterGradeMax" class="form-range" min="1" max="10" step="1" value="10">
        <div class="mt-2">
            <output id="gradeMaxValue">10</output>
        </div>
    </div>

    <!-- Filtruoti mygtukas -->
    <div class="d-flex align-items-center justify-content-center mb-3" style="width: 20%; display: flex; flex-direction: column; justify-content: center;">
        <button class="btn btn-primary" onclick="generateReport()">Generuoti</button>
        <button class="btn btn-secondary ms-2" style="margin-top: 10px;" onclick="clearFilters()">Išvalyti filtrus</button>
    </div>
</div>
<!-- Ataskaitos lentele -->
<table id="reportTable" class="table mt-4" style="display:none;">
    <thead>
        <tr>
            <th>Mokinys</th>
            <th>Klasė</th>
            <th>Dalykas</th>
            <th>Įvertinimo data</th>
            <th>Įvertinimas</th>
            <th>Atsiliepimo data</th>
            <th>Atsiliepimą parašęs mokytojas</th>
            <th>Atsiliepimas</th>
        </tr>
    </thead>
    <tbody>
        <!-- Dynamically populated rows will go here -->
    </tbody>
</table>
<p id="noResultsMessage" class="text-muted mt-3" style="display: none;">Nerasta jokių atitikčių.</p>
<div class="modal" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exportModalLabel">Pasirinkite eksportavimo formatą</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <label for="exportFormat">Pasirinkite formatą:</label>
        <select id="exportFormat" class="form-select">
          <option value="csv">CSV</option>
          <option value="txt">TXT</option>
          <option value="docx">DOCX</option>
        </select>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Atšaukti</button>
        <button type="button" class="btn btn-primary" onclick="exportReport()">Atsisiųsti</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function showMessage(message, type) {
            Swal.fire({
                title: type === 'success' ? 'Pavyko!' : 'Klaida!',
                text: message,
                icon: type,
                showConfirmButton: false,
                timer: 3000
            });
        }

        document.addEventListener("DOMContentLoaded", function() {
            var errorMessage = "@Html.Raw(TempData["ErrorMessage"])";
            var successMessage = "@Html.Raw(TempData["SuccessMessage"])";
            if (errorMessage) {
                showMessage(errorMessage, 'error');
            }
            if (successMessage) {
                showMessage(successMessage, 'success');
            }
        });

        // Atnaujinti min ir max reikšmes
        document.getElementById('filterGradeMin').addEventListener('input', function() {
            var minValue = parseInt(this.value);
            document.getElementById('gradeMinValue').textContent = minValue;

            // Užtikrinti, kad max slankiklis neleistų pasirinkti mažesnės vertės nei min
            var maxValue = parseInt(document.getElementById('filterGradeMax').value);
            if (maxValue < minValue) {
                document.getElementById('filterGradeMax').value = minValue;
                document.getElementById('gradeMaxValue').textContent = minValue;
            }

            filterReviews(); // Filtruoti duomenis pagal pasirinktas reikšmes
        });

        document.getElementById('filterGradeMax').addEventListener('input', function() {
            var maxValue = parseInt(this.value);
            document.getElementById('gradeMaxValue').textContent = maxValue;

            // Užtikrinti, kad max slankiklis neleistų pasirinkti mažesnės vertės nei min
            var minValue = parseInt(document.getElementById('filterGradeMin').value);
            if (maxValue < minValue) {
                document.getElementById('filterGradeMin').value = maxValue;
                document.getElementById('gradeMinValue').textContent = maxValue;
            }

            filterReviews(); // Filtruoti duomenis pagal pasirinktas reikšmes
        });

        function generateReport() {
            var student = document.getElementById('filterStudent').value;
            var startDate = document.getElementById('filterStartDate').value;
            var endDate = document.getElementById('filterEndDate').value;
            var subject = document.getElementById('filterSubject').value;
            var gradeMin = document.getElementById('filterGradeMin').value;
            var gradeMax = document.getElementById('filterGradeMax').value;

            // Sukuriame objektą su filtrais
            var filters = {
                student: student,
                startDate: startDate,
                endDate: endDate,
                subject: subject,
                gradeMin: gradeMin,
                gradeMax: gradeMax
            };

            // Atlikti POST užklausą
            fetch('/Report/Index', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(filters),
            })
            .then(response => response.json())
            .then(data => {
                var table = document.getElementById('reportTable');
                var tbody = table.querySelector('tbody');
                tbody.innerHTML = '';

                if (data.length > 0) {
                    data.forEach(studentGroup => {
                        // Mokinio pavadinimas
                        var studentRow = document.createElement('tr');
                        studentRow.innerHTML = `<td colspan="8" class="student-header" style="background-color: #f0f0f0; color: #333; font-weight: bold; padding: 10px;">
                            ${studentGroup.student}
                            <button class="export-button" onclick="showExportModal('${studentGroup.student}')"
                                    style="float: right; background-color: #007bff; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer;">
                                    Eksportuoti
                            </button>
                        </td>`;
                        tbody.appendChild(studentRow);

                        // Iteruojame per įvertinimus
                        studentGroup.records.forEach(item => {
                            var row = document.createElement('tr');
                            row.innerHTML = `<td></td> <!-- Tuščia pirmoje langelyje --> 
                            <td>${item.classid}</td>
                            <td>${item.subject}</td>
                            <td>${item.date}</td>
                            <td>${item.grade}</td>
                            <td></td> <!-- Atsiliepimų data -->
                            <td></td> <!-- Atsiliepimai -->
                            <td></td>
                            `;
                            tbody.appendChild(row);
                        });

                        // Pridedame atsiliepimus
                        studentGroup.reviews.forEach(review => {
                            var reviewRow = document.createElement('tr');
                            reviewRow.innerHTML = `<td></td>
                            <td colspan="4" style="text-align:left;">${review.type}:</td>
                            <td>${review.date}</td>
                            <td>${review.teacher}</td>
                            <td>${review.review}</td>`;
                            tbody.appendChild(reviewRow);
                        });
                    });
                    table.style.display = 'table';
                    document.getElementById('noResultsMessage').style.display = 'none';
                    showMessage("Ataskaita sėkmingai sugeneruota.", 'success');
                } else {
                    table.style.display = 'none';
                    document.getElementById('noResultsMessage').style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error generating report:', error);
                showMessage("Įvyko klaida generuojant ataskaitą.", 'error');
            });
        }
        
        function clearFilters() {
            document.getElementById('filterStudent').value = "";
            document.getElementById('filterStartDate').value = "";
            document.getElementById('filterEndDate').value = "";
            document.getElementById('filterSubject').value = "";
            document.getElementById('filterGradeMin').value = 1;
            document.getElementById('filterGradeMax').value = 10;

            document.getElementById('gradeMinValue').textContent = 1;
            document.getElementById('gradeMaxValue').textContent = 10;

            // Pašalinti rezultatus iš lentelės
            var table = document.getElementById('reportTable');
            table.querySelector('tbody').innerHTML = '';
            table.style.display = 'none';

            document.getElementById('noResultsMessage').style.display = 'none';
        }
        
        function showExportModal(student) {
            // Store the student name or any other required data in the modal for later use
            document.getElementById('exportModal').dataset.student = student;
            new bootstrap.Modal(document.getElementById('exportModal')).show();
        }

        function exportReport() {
            var format = document.getElementById('exportFormat').value;
            var student = document.getElementById('exportModal').dataset.student;
            showMessage("Ataskaita sėkmingai sugeneruota ir atsiunčiama.", 'success');

            fetch(`/Report/Export?student=${student}&format=${format}`, {
                method: 'GET'
            })
            .then(response => response.blob())
            .then(data => {
                var url = window.URL.createObjectURL(data);
                var a = document.createElement('a');
                a.href = url;
                a.download = `${student}_ataskaita.${format}`;
                a.click();
                window.URL.revokeObjectURL(url);
                showMessage("Ataskaita eksportuota.", 'success');
            })
            .catch(error => {
                console.error('Error exporting report:', error);
                showMessage("Įvyko klaida eksportuojant ataskaitą.", 'error');
            });
        }
    </script>
}